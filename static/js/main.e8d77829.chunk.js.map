{"version":3,"sources":["lib/api.js","assets/Icons.js","components/ContactRow.js","components/Sidebar.js","lib/input.js","components/Contact.js","App.js","reportWebVitals.js","index.js"],"names":["getContacts","page","itermsPerPage","a","fetch","method","headers","redirect","then","res","json","catch","error","console","response","contacts","totalItems","getContactById","contactId","id","firstName","lastName","emails","modifyContact","contact","body","JSON","stringify","deleteContact","status","responseCode","addContact","DeleteIcon","className","xmlns","viewBox","fill","fillRule","d","clipRule","AddIcon","ContactRow","selectContact","onClick","Sidebar","selectedId","loading","useState","searchInput","setSearchInput","searchTerms","setSearchTerms","useEffect","terms","split","filter","Boolean","updateSearchTerms","title","type","value","placeholder","onChange","event","target","onFocus","select","every","term","toLowerCase","includes","map","emailRegex","formatName","name","formattedName","trim","replace","length","alert","match","formatEmail","email","formattedEmail","Contact","saveChanges","setFirstName","setLastName","setEmails","editing","setEditing","initContact","onSaveChanges","validFirstName","validLastName","validEmails","formattedEmails","i","push","j","formatEmails","htmlFor","maxLength","disabled","updatedEmails","splice","deleteEmail","val","updateEmail","toString","concat","App","allContacts","setContacts","selectedContact","setSelectedContact","loadingContact","setLoadingContact","loadContacts","itemsPerPage","contactsFrag","sort","b","contact1","contact2","toUpperCase","window","confirm","setInterval","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8d77829.chunk.js","sourcesContent":["// get contacts by page\r\nexport async function getContacts(page, itermsPerPage) {\r\n    const response = await fetch(`https://avb-contacts-api.herokuapp.com/contacts/paginated?itemsPerPage=${itermsPerPage}&page=${page}`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        redirect: 'follow'\r\n    })\r\n        .then(res => res.json())\r\n        .catch(error => console.error('ERROR: ', error))\r\n\r\n    const { contacts, totalItems } = response || {}\r\n    return { contacts, totalItems }\r\n}\r\n\r\n// fetch contact by ID and return info if successful\r\nexport async function getContactById(contactId) {\r\n    const response = await fetch(`https://avb-contacts-api.herokuapp.com/contacts/${contactId}`, {\r\n        method: 'GET',\r\n        redirect: 'follow'\r\n    })\r\n        .then(res => res.json())\r\n        .catch(error => console.error('ERROR: ', error))\r\n\r\n    const { id, firstName, lastName, emails } = response || {}\r\n    return { id, firstName, lastName, emails }\r\n}\r\n\r\n// edit contact and return info if successful\r\nexport async function modifyContact(contactId, contact) {\r\n    const response = await fetch(`https://avb-contacts-api.herokuapp.com/contacts/${contactId}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        redirect: 'follow',\r\n        body: JSON.stringify(contact)\r\n    })\r\n        .then(res => res.json())\r\n        .catch(error => { console.error('ERROR: ', error) })\r\n\r\n    const { id, firstName, lastName, emails } = response || {}\r\n    return { id, firstName, lastName, emails }\r\n}\r\n\r\nexport async function deleteContact(contactId) {\r\n    const responseCode = await fetch(`https://avb-contacts-api.herokuapp.com/contacts/${contactId}`, {\r\n        method: 'DELETE',\r\n        redirect: 'follow'\r\n    })\r\n        .then(res => res.status)\r\n        .catch(error => console.error('ERROR: ', error))\r\n\r\n    return (responseCode === 200)\r\n}\r\n\r\n// add contact and return info if successful\r\nexport async function addContact(contact) {\r\n    const response = await fetch(`https://avb-contacts-api.herokuapp.com/contacts`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        redirect: 'follow',\r\n        body: JSON.stringify(contact)\r\n    })\r\n        .then(res => res.json())\r\n        .catch(error => console.error('ERROR: ', error))\r\n        \r\n    const { id, firstName, lastName, emails } = response || {}\r\n    return { id, firstName, lastName, emails }\r\n}\r\n","export function DeleteIcon({className}) {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} viewBox=\"0 0 20 20\" fill='#FF5757'>\r\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 000 2h6a1 1 0 100-2H7z\" clipRule=\"evenodd\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport function AddIcon({className}) {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} viewBox=\"0 0 20 20\" fill=\"#579AFF\">\r\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z\" clipRule=\"evenodd\" />\r\n        </svg>\r\n    )\r\n}","export function ContactRow({ contact, selectContact, className }) {\r\n    return (\r\n        <div className={`${className} cursor-pointer`}\r\n        onClick={() => selectContact(contact.id)}>\r\n            <p className='select-none whitespace-nowrap'>{contact.firstName + ' ' + contact.lastName}</p>\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from \"react\"\r\nimport { AddIcon } from \"../assets/Icons\"\r\nimport { ContactRow } from \"./ContactRow\"\r\n\r\nexport function Sidebar({ contacts, selectContact, selectedId, loading, className }) {\r\n    const [searchInput, setSearchInput] = useState('')\r\n    const [searchTerms, setSearchTerms] = useState([])\r\n\r\n    // split search input into an array of search terms\r\n    useEffect(() => {\r\n        function updateSearchTerms() {\r\n            const terms = searchInput.split(' ').filter(Boolean)\r\n            setSearchTerms([...terms])\r\n        }\r\n        updateSearchTerms()\r\n    }, [searchInput])\r\n\r\n    return (\r\n        <div className={`${className} bg-light text-left flex flex-col py-2`}>\r\n            <div className='flex justify-between align-baseline px-3 py-2'>\r\n                <p className='text-4xl opacity-80 font-light'>Contacts</p>\r\n                <button\r\n                    title=\"Add new contact\"\r\n                    onClick={() => selectContact(null)}>\r\n                    <AddIcon className='h-10' />\r\n                </button>\r\n            </div>\r\n            <div className='flex p-2'>\r\n                <input\r\n                    className='w-full py-1 px-2 border border-input focus:border-primary outline-none'\r\n                    type='text'\r\n                    value={searchInput}\r\n                    placeholder='search'\r\n                    onChange={event => setSearchInput(event.target.value)}\r\n                    onFocus={(event) => event.target.select()}\r\n                />\r\n            </div>\r\n            <ul className='overflow-y-auto h-full'>\r\n\r\n                {\r\n                    // display only contacts that contain all search terms\r\n                    contacts.filter(contact => searchTerms.every(term => {\r\n                        const fullName = contact.firstName + ' ' + contact.lastName\r\n                        return fullName.toLowerCase().includes(term.toLowerCase())\r\n                    })\r\n                    ).map(contact => {\r\n                        return <ContactRow\r\n                            className={`${contact.id === selectedId ? 'bg-primary text-white' : 'hover:bg-blue-100'} px-3 py-2 new-row-animated`}\r\n                            selectContact={(id) => selectContact(id)}\r\n                            key={contact.id} contact={contact} />\r\n                    })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}","const emailRegex = /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/\r\n\r\n// format and validate name\r\nexport function formatName(name) {\r\n    let formattedName = name.trim()\r\n    formattedName.replace(/\\s{2,}/, ' ')\r\n\r\n    if (formattedName.length === 0) {\r\n        alert('Cannot save contact: first and last name cannot be empty.')\r\n        return false\r\n    }\r\n\r\n    if (formattedName.match(/[^\\w\\d\\s]/)) {\r\n        alert('Cannot save contact: name can only contain alphanumeric and white space characters.')\r\n        return false\r\n    }\r\n\r\n    if (formattedName.length > 32) {\r\n        alert('Cannot save contact: first or last name cannot be longer than 32 characters.')\r\n        return false\r\n    }\r\n    return formattedName\r\n}\r\n\r\n// format and validate all emails\r\nexport function formatEmails(emails) {\r\n    const formattedEmails = []\r\n    for (let i = 0; i < emails.length; i++) {\r\n        const formattedEmail = formatEmail(emails[i])\r\n        if (formattedEmail) {\r\n            formattedEmails.push(formattedEmail)\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < formattedEmails.length - 1; i++) {\r\n        for (let j = i + 1; j < formattedEmails.length; j++) {\r\n            if (formattedEmails[i].toLowerCase() === formattedEmails[j].toLowerCase()) {\r\n                alert('Cannot save contact: email address ' + formattedEmails[i] + ' already exists for this contact.')\r\n                return false\r\n            }\r\n        }\r\n    }\r\n\r\n    return formattedEmails\r\n}\r\n\r\n// format and validate email\r\nfunction formatEmail(email) {\r\n    let formattedEmail = email.trim()\r\n    formattedEmail = formattedEmail.toLowerCase()\r\n\r\n    if (email === '') {\r\n        alert('Cannot save contact: email address cannot be empty.')\r\n        return false\r\n    } else if (formattedEmail.match(emailRegex)) {\r\n        return formattedEmail\r\n    } else {\r\n        alert('Cannot save contact: invalid email address.')\r\n        return false\r\n    }\r\n\r\n}","import { useState, useEffect } from \"react\"\r\nimport { AddIcon, DeleteIcon } from \"../assets/Icons\"\r\nimport { formatEmails, formatName } from '../lib/input';\r\n\r\nexport function Contact({ contact, deleteContact, saveChanges, className }) {\r\n    const [firstName, setFirstName] = useState('')\r\n    const [lastName, setLastName] = useState('')\r\n    const [emails, setEmails] = useState([])\r\n    const [editing, setEditing] = useState(false)\r\n\r\n    // load contact passed as param\r\n    function initContact() {\r\n        setFirstName(contact.firstName)\r\n        setLastName(contact.lastName)\r\n        setEmails([...contact.emails])\r\n        setEditing(contact?.id ? false : true)\r\n    }\r\n\r\n    function deleteEmail(i) {\r\n        const updatedEmails = emails\r\n        updatedEmails.splice(i, 1)\r\n        setEmails([...updatedEmails])\r\n    }\r\n\r\n    function addEmail() {\r\n        setEmails(emails.concat(''))\r\n    }\r\n\r\n    function updateEmail(i, val) {\r\n        const updatedEmails = emails\r\n        updatedEmails[i] = val\r\n        setEmails([...updatedEmails])\r\n    }\r\n\r\n    // validate contact info and save formatted information \r\n    function onSaveChanges() {\r\n        const validFirstName = formatName(firstName)\r\n        if (!validFirstName) return\r\n\r\n        const validLastName = formatName(lastName)\r\n        if (!validLastName) return\r\n\r\n        const validEmails = formatEmails(emails)\r\n        if (!validEmails) return\r\n\r\n        if (validFirstName && validLastName && validEmails) {\r\n            saveChanges({\r\n                firstName: validFirstName,\r\n                lastName: validLastName,\r\n                emails: validEmails,\r\n                id: contact.id\r\n            })\r\n            setEditing(false)\r\n        }\r\n    }\r\n\r\n    // update contact info states on contact param change\r\n    useEffect(() => {\r\n        initContact()\r\n    }, [contact])\r\n\r\n\r\n    return (\r\n        <div className={`${className} flex flex-col justify-between gap-12 p-6 pt-10 bg-white overflow-y-auto`}>\r\n            <div className='space-y-4'>\r\n                <div className='flex flex-row gap-4'>\r\n                    <div className='flex flex-col items-start w-1/2'>\r\n                        <label className='text-sm mb-1 opacity-80' htmlFor='contact-firstname'>First Name</label>\r\n                        <input\r\n                            maxLength={32}\r\n                            id='contact-firstname'\r\n                            type='text' value={firstName}\r\n                            onChange={event => setFirstName(event.target.value)}\r\n                            disabled={!editing}\r\n                            className={`transition-all w-full border ${editing ? 'border-input bg-light focus:border-primary' : 'border-transparent bg-transparent'} px-2 py-1 text-lg outline-none`} />\r\n                    </div>\r\n                    <div className='flex flex-col items-start w-1/2'>\r\n                        <label className='text-sm mb-1 opacity-80' htmlFor='contact-lastname'>Last Name</label>\r\n                        <input\r\n                            maxLength={32}\r\n                            id='contact-lastname'\r\n                            type='text'\r\n                            value={lastName}\r\n                            onChange={event => setLastName(event.target.value)}\r\n                            disabled={!editing}\r\n                            className={`transition-all w-full border border-input ${editing ? 'border-opacity-100 bg-light focus:border-primary' : 'border-opacity-0 bg-white'} px-2 py-1 text-lg outline-none`} />\r\n                    </div>\r\n                </div>\r\n                <div className='flex flex-col items-start'>\r\n                    <label className='text-sm mb-1 opacity-80' htmlFor='contact-emails'>Emails</label>\r\n                    <ul className='flex flex-col gap-1' id='contact-emails'>\r\n                        {emails?.map((email, i) =>\r\n                            <li key={i} className={`flex flex-row items-end`}>\r\n                                <button\r\n                                    title=\"Delete email\"\r\n                                    disabled={!editing}\r\n                                    className={`absolute transition-all transform ${editing ? 'scale-100' : ' scale-0 opacity-0 select-none'} place-self-center`}\r\n                                    onClick={() => { deleteEmail(i) }}\r\n                                ><DeleteIcon className='h-7' /></button>\r\n                                <input\r\n                                    key={i.toString()}\r\n                                    type='text' value={emails[i]}\r\n                                    onChange={event => updateEmail(i, event.target.value)}\r\n                                    disabled={!editing}\r\n                                    className={`transition-all transform w-full border ${editing ? ' translate-x-8 border-input bg-light focus:border-primary' : 'border-transparent bg-transparent'} px-2 py-1 text-lg outline-none`} />\r\n                            </li>\r\n                        )}\r\n                        <button\r\n                            title=\"Add new email\"\r\n                            disabled={!editing}\r\n                            className={`transition-all transform ${editing ? '' : 'opacity-0 cursor-default select-none'} flex flex-row h-10 py-1 items-center text-primary mt-2`}\r\n                            onClick={addEmail}\r\n                        ><AddIcon className='h-7 mr-1' />{'add email'}\r\n                        </button>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div className='flex justify-between'>\r\n                <button\r\n                    title=\"Delete contact\"\r\n                    className='border border-danger bg-danger text-white p-1 w-24 '\r\n                    onClick={deleteContact} >\r\n                    Delete\r\n                </button>\r\n\r\n                <div className='space-x-6'>\r\n                    {editing ?\r\n                        <button\r\n                            title=\"Cancel changes\"\r\n                            className='border bg-white border-primary p-1 w-24'\r\n                            onClick={contact.id ? initContact : deleteContact}>\r\n                            Cancel\r\n                        </button> : null}\r\n\r\n                    <button\r\n                        title=\"Save changes\"\r\n                        className='border border-primary bg-primary text-white p-1 w-24'\r\n                        onClick={() => {\r\n                            if (editing) onSaveChanges()\r\n                            else setEditing(!editing)\r\n                        }}>\r\n                        {editing ? 'Save' : 'Edit'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import './App.css'\nimport {\n  addContact,\n  modifyContact,\n  deleteContact,\n  getContactById,\n  getContacts\n} from './lib/api';\nimport { Sidebar } from './components/Sidebar';\nimport { Contact } from './components/Contact';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const [allContacts, setContacts] = useState([])\n  const [selectedContact, setSelectedContact] = useState(null)\n  const [loadingContact, setLoadingContact] = useState(false)\n\n  // load all contacts upon startup\n  useEffect(() => {\n    loadContacts()\n\n    // update contact list in case another client makes changes\n    setInterval(() => { loadContacts() }, 5000)\n  }, [])\n\n  // set loading state to false once contact information is fetched\n  useEffect(() => {\n    setLoadingContact(false)\n  }, [selectedContact])\n\n  // load all contacts using paginated api endpoint and sort alphabetically\n  async function loadContacts() {\n    let page = 1, itemsPerPage = 20;\n    const contacts = []\n\n    let res = await getContacts(page, itemsPerPage)\n    let contactsFrag = res.contacts\n    let totalItems = res.totalItems\n\n    contacts.push(...contactsFrag)\n\n    while (totalItems && page * itemsPerPage < totalItems) {\n      page++\n\n      let res = await getContacts(page, itemsPerPage)\n      contactsFrag = res.contacts\n      totalItems = res.totalItems\n\n      contacts.push(...contactsFrag)\n    }\n\n    contacts.sort((a, b) => {\n      const contact1 = a.firstName.concat(a.lastName)\n      const contact2 = b.firstName.concat(b.lastName)\n\n      if (contact1.toUpperCase() > contact2.toUpperCase())\n        return 1\n      else\n        return -1\n    })\n\n    setContacts(contacts)\n  }\n\n  // fetch contact by ID and set as selected contact\n  // if no id is supplied, a new empty contact is created and selected for editing\n  async function selectContact(id) {\n    setLoadingContact(true)\n\n    if (id) {\n      const contact = await getContactById(id)\n      if (contact.id)\n        setSelectedContact(contact)\n      else\n        alert('Cannot fetch data: contact no longer exists in database.')\n    } else {\n      const contact = id ? await getContactById(id) : {\n        firstName: '',\n        lastName: '',\n        emails: []\n      }\n      setSelectedContact(contact)\n    }\n  }\n\n  // delete selected contact.\n  async function deleteSelectedContact() {\n    if (selectedContact.id)\n      if (window.confirm('Do you wish to delete ' + selectedContact.firstName + ' ' + selectedContact.lastName + ' from your contact list?'))\n        await deleteContact(selectedContact.id)\n      else\n        return\n\n    setSelectedContact(null)\n    loadContacts()\n  }\n\n  // save changes made to an existing contact or save new contact (when selected contact has no ID)\n  async function saveChanges(contact) {\n    if (contact.id) {\n      const res = await modifyContact(contact.id, contact)\n      if (!res.id) {\n        alert('Cannot save changes: selected user no longer exists in database.')\n        setSelectedContact(null)\n      }\n    } else {\n      setSelectedContact(await addContact(contact))\n    }\n    loadContacts()\n  }\n\n  return (\n    <div\n      className=\"App w-screen h-screen p-32 px-8 bg-gradient-to-t from-indigo-500 to-indigo-400\">\n      <div className='bg-white flex flex-row min-w-min mx-auto max-w-5xl h-full max-h-full shadow-2xl'>\n        <Sidebar\n          className='w-56 flex-shrink-0 flex-grow-0'\n          contacts={allContacts}\n          selectContact={selectContact}\n          selectedId={selectedContact?.id}\n        />\n        {!loadingContact && selectedContact ?\n          <Contact\n            className='flex-grow'\n            contact={selectedContact}\n            saveChanges={saveChanges}\n            deleteContact={deleteSelectedContact}\n          />\n          : <div className='flex-grow text-center place-self-center'>{loadingContact ? 'Loading...' : 'Select a contact or create a new one. '}</div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}